1) What does the "Category_Grouped" column represent, and how many unique categories are there?
 
    	SELECT COUNT([DISTINCT]CATEGORY_GROUPED) 
    	FROM PURCHASE_DATA;

2) Can you list the top 5 shipping cities in terms of the number of orders?
            
    	SELECT SHIPPING_CITY
    	FROM PURCHASE_DATA
    	WHERE ROWNUM<=5;

3) Show me a table with all the data for products that belong to the "Electronics" category.

	SELECT CATEGORY
	FROM PURCHASE_DATA
	WHERE CATEGORY='ELECTRONICS'; 

4) Filter the data to show only rows with a "Sale_Flag" of 'Yes'

	SELECT SALE_FLAG
	FROM PURCHASE_DATA
	WHERE SALE_FLAG='ON SALE';

5) Sort the data by "Item_Price" in descending order. What is the most expensive item?
 
	SELECT MAX(ITEM_PRICE)
	FROM PURCHASE_DATA
	ORDER BY ITEM_PRICE(DESC);
	
6)  Apply conditional formatting to highlight all products with a "Special_Price_effective" value below $50 in red.

  	SELECT *
	FROM PURCHASE_DATA
	WHERE Special_Price_effective < 50;


7) Create a pivot table to find the total sales value for each category. 

	SELECT CATEGORY,SUM(SALE_FALG) AS TOTALSALESVALUE
	FROM PURCHASE_DATA
	GROUP BY CATEGORY;	
	
8) Create a bar chart to visualize the total sales for each category.

	SELECT CATEGORY,SUM(SALE_FALG) AS TOTALSALES
	FROM PURCHASE_DATA
	GROUP BY CATEGORY;
   
9) Create a pie chart to show the distribution of products in the "Family" category.

	SELECT Family, COUNT(*) AS TotalProducts
	FROM PURCHASE_DATA
	GROUP BY Family; 

10) Ensure that the "Payment_Method" column only contains valid payment methods (e.g.,Visa, MasterCard).
	SELECT *
	FROM PURCHASE_DATA
	WHERE PAYMENT_METHOD NOT IN('COD');

11) Calculate the average "Quantity" sold for products in the "Clothing" category, grouped by "Product_Gender."
	SELECT AVG(QUANTITY)
	FROM PURCHASE_DATA
	WHERE CATEGORY_GROUPED IN APPAREALS
	GROUP BY PRODUCT_GENDER;

12) Find the top 5 products with the highest "Value_CM1" and "Value_CM2" ratios. Create a chart to visualize this data
	
	SELECT (VALUE_CM1/VALUE_CM2) AS RATIO
	FROM PURCHASE_DATA
	ORDER BY RATIO(DESC);

13) Identify the top 3 "Class" categories with the highest total sales. Create a stacked bar chart to represent this data

	SELECT Class, SUM(s.Amount) AS TotalSales
	FROM  PURCHASE_DATA s
	JOIN Products p ON s.ProductID = p.ProductID
	GROUP BY Class
	ORDER BY TotalSales DESC
	LIMIT 3;

14) Use VLOOKUP or INDEX-MATCH to retrieve the "Color" of a product with a specific "Item_NM."
	SELECT Color
	FROM PURCHASE_DATA
	WHERE Item_NM = 'VLOOKUP' OR Item_NM = 'INDEX-MATCH';	

15) Calculate the total "coupon_money_effective" and "Coupon_Percentage" for products in the "Electronics" category.

         SELECT SUM(coupon_money_effective),SUM(Coupon_Percentage)
         FROM PURCHASE_DATA
         WHERE CATEGORY ='ELECTRONICS';

16) Perform a time series analysis to identify the month with the highest total sales.
 
            SELECT SUM(QUANTITY) AS TOTAL_SALES
            FROM PURCHASE_DATA
            GROUP BY MONTH 
            ORDER BY TOATAL_SALES;
     
17) Calculate the total sales for each "Segment" and create a scatter plot to visualize the relationship between "Item_Price" and "Quantity" in this data.

            SELECT SEGMENT,SUM(ITEM_PRICE* QUANTITY)
            FROM  PURCHASE_DATA
            GROUP BY SEGMENT;

18) Use the AVERAGEIFS function to find the average "Item_Price" for products that have a "Sale_Flag" of 'Yes.'

             SELECT AVG(ITEM_PRICE)
             FROM  PURCHASE_DATA
             WHERE SALE_FLAG='ON SALE';

19) Identify products with a "Paid_pr" higher than the average in their respective "Family" and "Brand" groups.
             SELECT * 
             FROM  PURCHASE_DATA
             WHERE PAID_PR >(SELECT AVG(PAID_PR)
                             FROM PURCHASE_DATA
                             GROUP BY FAMILY,BRAND);

20) Create a pivot table to show the total sales for each "Color" within the "Clothing" 
category and use conditional formatting to highlight the highest sales.

              
               SELECT SUM( Category = 'Clothing' )
               FROM PURCHASE_DATA             
               GROUP BY Color;
                        
      

             
         

                   
	
